#!/usr/bin/env node
"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0});var findUp=require("find-up"),fs_1=__importDefault(require("fs")),chalk=require("chalk"),globby=require("globby"),pkg=require("../package.json"),configPath=findUp.sync([".file-linter",".file-linter.json","file-linter","file-linter.json"]),config=configPath?JSON.parse(fs_1.default.readFileSync(configPath).toString("utf8")):{};require("yargs").option("recursive",{alias:"r",default:!1}).pkgConf("file-linter").config(config).command("$0","the default command",function(e){},function(e){var r=e.regex,i=e.recursive;if("object"!=typeof r)throw new TypeError("Regex values must be of type object");var t=Object.keys(r).map(function(e){var t=r[e];if("string"!=typeof(t&&e))throw new TypeError("regexAssersion and dirName values must be of type string");return{dirName:e,results:globby.sync([e],{deep:!!i}).map(function(e){var r=new RegExp(t).test(e.split("/")[1]);return{fileName:e.split("/")[1],passed:r}})}});console.log(chalk.green(pkg.name+" [v"+pkg.version+"]:\n")),t.forEach(function(e){var r=e.dirName,t=e.results;console.log(chalk.yellow(r+"/")),t.forEach(function(e){var r=e.fileName,t=e.passed;console.log(chalk.green("  "+r+" "+(t?"✓":"✗")))})})}).argv;
#!/usr/bin/env node
"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0});var chalk_1=__importDefault(require("chalk")),find_up_1=__importDefault(require("find-up")),fs_1=__importDefault(require("fs")),globby_1=__importDefault(require("globby")),yargs_1=__importDefault(require("yargs")),pkg=require("../package.json"),configPath=find_up_1.default.sync([".file-linter",".file-linter.json","file-linter","file-linter.json"]),config=configPath?JSON.parse(fs_1.default.readFileSync(configPath).toString("utf8")):{};yargs_1.default.option("recursive",{alias:"r",type:"boolean",describe:"Recursively search for files",default:!1}).pkgConf("file-linter").config(config).command("$0",pkg.description,{},function(e){var r=e.regex,o=e.recursive;if("object"!=typeof r)throw new TypeError("Regex values must be of type object");var t=Object.keys(r).map(function(e){var l=r[e];if("string"!=typeof(l&&e))throw new TypeError("regexAssersion and dirName values must be of type string");return{dirName:e,files:globby_1.default.sync([e],{deep:!!o}).map(function(e){var r=e.split("/"),o=r.shift(),t=r.pop(),i=r,a=!!t&&new RegExp(l).test(t);return{fileName:t,baseDir:o,dirPath:i,regexAssersion:l,passed:a}})}});console.log(chalk_1.default.green(pkg.name+" [v"+pkg.version+"]:\n"));var l=0,n=0,s=0;t.forEach(function(e){var a=e.dirName;e.files.forEach(function(e){var r=e.dirPath,o=e.fileName,t=e.regexAssersion,i=e.passed;l++,console.log(chalk_1.default.yellow("  "+a+"/"+(0<r.length?r.join("/")+"/":""))),!0===i?(n++,console.log(chalk_1.default.green("    "+o+" ✓"))):(s++,console.log(chalk_1.default.red("    "+o+" ✗ ("+t+")")))})}),console.log(chalk_1.default.green.bold("\nPassed: ("+n+"/"+l+")")),0<s&&(console.log(chalk_1.default.red.bold("Failed: ("+s+"/"+l+")")),process.exit(1)),process.exit(0)}).argv;